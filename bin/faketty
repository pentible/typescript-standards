#!/usr/bin/env bash

# TODO: remove once eslint tty bug is fixed...

# SOURCE: https://stackoverflow.com/questions/1401002/how-to-trick-an-application-into-thinking-its-stdout-is-a-terminal-not-a-pipe/60279429#60279429

# Create a temporary file for storing the status code
tmp=$(mktemp)

# Ensure it worked or fail with status 99
[[ -n "$tmp" ]] || exit 99

# Produce a script that runs the command provided to faketty as
# arguments and stores the status code in the temporary file
cmd="$(printf '%q ' "$@")"'; echo $? > '$tmp

# Run the script through /bin/sh with fake tty
if [[ "$(uname)" = "Darwin" ]]; then
    # MacOS
    script -Fq /dev/null /bin/sh -c "$cmd"
else
    script -qfc "/bin/sh -c $(printf "%q " "$cmd")" /dev/null
fi

# Ensure that the status code was written to the temporary file or
# fail with status 99
[[ -s $tmp ]] || exit 99

# Collect the status code from the temporary file
err=$(cat "$tmp")

# Remove the temporary file
rm -f "$tmp"

# Exit the status code
exit "$err"
